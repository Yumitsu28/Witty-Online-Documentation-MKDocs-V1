{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#purpose","title":"Purpose","text":"<p>This is the documentation for the Witty Mobile Personal app developed on the Android platform, it\u2019s functionalities and features, corresponding API calls, and limitations.</p>"},{"location":"#resources","title":"Resources","text":"Version PM/Developer Name Estimate Duration Budget/Cost V1 Woo-Il Kim (mobile) Taekwon Moon"},{"location":"featureRequirements/","title":"Feature Requirements","text":""},{"location":"featureRequirements/#monthly-closing-report","title":"Monthly Closing Report","text":"<p>A summary report for Employees\u2019 time clock hours. This report is generated by month depending on user\u2019s selection. It consists of two separate tabs:</p>"},{"location":"featureRequirements/#a-summary-view","title":"A. Summary View","text":"<p>Displays the total hours rendered of an employee within the month selected. Work hours are grouped based on Reg Schedules, Overtime Schedules, Special Days, Lates, Undertimes, Absences, etc</p>"},{"location":"featureRequirements/#a-prototype","title":"a. Prototype","text":""},{"location":"featureRequirements/#b-api-api-documentation-url","title":"b. API - API Documentation Url","text":"<pre><code>v2/reports/my-monthly-work-report?org_id=4338&amp;start_date=2019-01-0100:00:00&amp;end_date=2019-01-31 23:59:59&amp;employee_id=8464&amp;limit=0 \n</code></pre>"},{"location":"featureRequirements/#sample-responses","title":"Sample Responses:","text":""},{"location":"featureRequirements/#c-actual-result-and-equivalent-response-attribute","title":"c. Actual result and equivalent response attribute","text":"<p>I. Day Shift Reg = <code>record.day_shift.regular_work</code></p> <p>II. Day Shift Early = <code>record.day_shift.early_work</code></p> <p>III. Day Shift OT = <code>record.day_shift.overtime_work</code></p> <p>IV. Day Shift Approved OT = <code>record.day_shift. approved_overtime_work</code></p> <p>V. Night Shift Reg = <code>record.night_shift_shift.regular_work</code></p> <p>VI. Night Shift Early = <code>record.night_shift.early_work</code></p> <p>VII. Night Shift OT = <code>record.night_shift.overtime_work</code></p> <p>VIII. Night Shift Approved = <code>record.night_shift.approved_overtime_work</code></p> <p>IX. Special Day Reg = <code>record.special_day_shift.regular_work</code></p> <p>X. Special Day Early = <code>record.special_day_shift.early_work</code></p> <p>XI. Special Day OT = <code>record.special_day_shift.overtime_work</code></p> <p>XII. Special Day Approved OT = <code>record.special_day_shift. approved_overtime_work</code></p> <p>XIII. Special Night Reg = <code>record.special_night_shift.regular_work</code></p> <p>XIV. Special Night Early = <code>record.special_night _shift.early_work</code></p> <p>XV. Special Night OT = <code>record.special_night _shift.overtime_work</code></p> <p>XVI. Special Night Approved OT = <code>` record.special_night_shift.approved_overtime_work</code></p> <p>XVII. Late = <code>record.late_hours</code></p> <p>XVIII. Absent = <code>record.absences</code></p> <p>XIX. Undertime = <code>record.undertime_hours</code></p>"},{"location":"featureRequirements/#b-table-view","title":"B. Table View","text":""},{"location":"featureRequirements/#b-api-api-documentation-url_1","title":"b. API - API Documentation Url","text":"<pre><code>v2/reports/my-time-sheet-report?org_id=4338&amp;start_date=2019-02-0100:00:00&amp;end_date=2019-02-28 23:59:59&amp;employee_id=8680&amp;limit=0\n</code></pre>"},{"location":"featureRequirements/#c-features-functions","title":"c. Features / Functions","text":"<p>I. User can select a month to base the report.</p> <p>II. The page can display all errors in the attendance or time record.</p> <p>III. Each day, if contains error, will be marked with the red background as displayed on the screenshot above (it could be the entire row as planned or just the first column).</p> <p>IV. Each cell displays the value based from the return of API call.</p> <p>V. Clicking the day row will redirect to Work Schedule (calendar view). </p> <p>VI. If <code>enable_work_type</code> is true, hide the following columns: 4 columns of Approved OT.</p> <p>VII. If <code>enable_work_type</code> is false, hide the following columns: Day Shift Early, NightShift Early, Special Day Early, Special Night  Early.</p> <p>VIII. If no conflict/errors found, a CONFIRM ALL button will show (see prototype).</p>"},{"location":"featureRequirements/#clock-in-clock-out","title":"CLOCK IN / CLOCK OUT","text":"<p>Allows employee to clock in, clock out or take a break. This is the default display when you open the Sidebar menu.</p>"},{"location":"featureRequirements/#a-prototype_1","title":"A. Prototype","text":""},{"location":"featureRequirements/#b-features-functions","title":"B. Features / Functions","text":""},{"location":"featureRequirements/#a-gps","title":"a. GPS","text":"<p>CASE A : <code>check_location</code>  is false</p> <ul> <li>PROCEED TO CLOCKIN/CLOCKOUT PROCESS</li> </ul> <p>CASE B : <code>check_location</code> is true</p> <p>I. If <code>check_location</code> is true, on page load, get the list of areas available for that employee.</p> <p>II. Call API API Documentation Url <pre><code> v2/employees/employee?id=32\n</code></pre></p>"},{"location":"featureRequirements/#sample-response","title":"Sample Response:","text":"<p>III. Check if GPS is enabled in user\u2019s device. If not, ask permission then turn on. If turned on, start receiving location updates to get current latitude and longitude</p> <p>IV. On click CLOCK IN / CLOCK OUT button, check again if the GPS is enabled (because the user can still turn it off while they are on that page), then check if the location is within the employee areas based on the latitude, longitude and the radius set)</p> <p>V. PROCEED TO CLOCKIN/OUT PROCESS</p>"},{"location":"featureRequirements/#b-how-to-detect-if-clock-in-or-clock-out-button-will-show","title":"b. How to detect if CLOCK IN or CLOCK OUT button will show","text":"<p>I. Call API API Documentation Url <pre><code>v2/employees/timeclock/status?employee_id=32\n</code></pre></p> <p>This will return 3 major data:</p> <ol> <li>record -&gt; current time clock record of employee</li> </ol> <p>CASE A. If employee has current time_clock record, time clock status is CLOCKED_IN so button will show CLOCK OUT. Unless:</p> <p>Check company_settings <code>\u201callowed_actual_work_hours\u201d</code>. Get <code>current_working_hours</code> by getting the time difference of <code>record.clock_in</code> and current time.</p> <p>a. If <code>current_working_hours &gt; allowed_actual_work_hours</code>, time clock status is still CLOCKED_IN but the button to show is CLOCK IN.</p> <p>b. If <code>current_working_hours &lt; allowed_actual_work_hours</code>, time clock status is CLOCKED_IN and the button to show is CLOCK OUT.</p> <p>CASE B: if employee has NO current time_clock record, time clock status is CLOCKED_OUT so button will show CLOCK IN.</p> <ol> <li> <p>prev_record -&gt; returns the employee\u2019s previous time_clock record to determine the LAST CLOCKED IN or CLOCKED OUT time to be displayed on the same page</p> </li> <li> <p>break_record -&gt; if this data is not null and company settings <code>\u201cenable_break\u201d</code> is true, display BREAK_OUT option for user (second button in this page)</p> </li> </ol>"},{"location":"featureRequirements/#b-api-error-codes","title":"b. API Error codes","text":""},{"location":"featureRequirements/#test-navigation","title":"Test Navigation","text":""}]}